/* Generated by AN DISI Unibo */ 
package it.unibo.wis

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Wis ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
			val DLIMT = 5
			var wasteStorageWeight=0
			var ashStorageLevel = 0
			var posX = 0
			var posY = 0
			var incinerator = 0
			var job = ""
			var RP=1
			var INC = 2
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("[$name] Initializing system")
						subscribeToLocalActor("incinerator") 
						subscribeToLocalActor("scalemock") 
						subscribeToLocalActor("sonarmock") 
						subscribeToLocalActor("oprobot") 
						forward("act", "act($INC)" ,"incinerator" ) 
						CommUtils.outgreen("[$name] sent act to incinerator")
						 incinerator = 2  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingRP", cond=doswitch() )
				}	 
				state("waitingRP") { //this:State
					action { //it:State
						CommUtils.outgreen("[$name] waiting for RP")
						forward("goHome", "goHome(X)" ,"oprobot" ) 
						CommUtils.outgreen("[$name] inviato goHome ad oprobot.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t019",targetState="verifyCondition",cond=whenEvent("stateScale"))
					transition(edgeName="t020",targetState="verifyCondition",cond=whenEvent("stateSonar"))
				}	 
				state("verifyCondition") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						CommUtils.outblack("[DEBUG $name] RP=$RP, incineratorState=$incinerator, ashStorageLevel=$ashStorageLevel")
						if( checkMsgContent( Term.createTerm("stateSonar(X)"), Term.createTerm("stateSonar(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 ashStorageLevel = payloadArg(0).toInt()  
								CommUtils.outgreen("[$name] Ash storage level updated: $ashStorageLevel")
						}
						if( checkMsgContent( Term.createTerm("stateScale(X)"), Term.createTerm("stateScale(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	wasteStorageWeight = payloadArg(0).toInt() 
												 RP = wasteStorageWeight/50  
								CommUtils.outgreen("[$name] RP quantity updated: $RP")
						}
						if( checkMsgContent( Term.createTerm("ashDeposited(X)"), Term.createTerm("ashDeposited(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 var LEVEL = payloadArg(0).toInt()  
								forward("ashDeposited", "ashDeposited($LEVEL)" ,"sonarmock" ) 
								CommUtils.outgreen("[$name] Ash storage level updated: $ashStorageLevel")
						}
						if( RP>0 && incinerator!=1 && ashStorageLevel > DLIMT 
						 ){CommUtils.outblack("TRUE")
						}
						else
						 {CommUtils.outblack("FALSE")
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="startRoutine", cond=doswitchGuarded({RP>0 && incinerator!=1 && ashStorageLevel > DLIMT 
					}) )
					transition( edgeName="goto",targetState="waitingRP", cond=doswitchGuarded({! (RP>0 && incinerator!=1 && ashStorageLevel > DLIMT 
					) }) )
				}	 
				state("startRoutine") { //this:State
					action { //it:State
						CommUtils.outgreen("[$name] start routine")
						forward("bringRP", "bringRP(X)" ,"oprobot" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t021",targetState="startIncinerator",cond=whenDispatch("atIncinerator"))
					transition(edgeName="t022",targetState="handleStateScale",cond=whenEvent("stateScale"))
					transition(edgeName="t023",targetState="handleStateSonar",cond=whenEvent("stateSonar"))
					transition(edgeName="t024",targetState="handleRobotPosition",cond=whenEvent("position"))
				}	 
				state("startIncinerator") { //this:State
					action { //it:State
						CommUtils.outgreen("[$name] Incinerator started")
						forward("act", "act(1)" ,"incinerator" ) 
						forward("goHome", "goHome(X)" ,"oprobot" ) 
						 incinerator = 1 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t025",targetState="endIncinerator",cond=whenEvent("burnEnd"))
					transition(edgeName="t026",targetState="handleStateScale",cond=whenEvent("stateScale"))
					transition(edgeName="t027",targetState="handleStateSonar",cond=whenEvent("stateSonar"))
					transition(edgeName="t028",targetState="handleRobotPosition",cond=whenEvent("position"))
				}	 
				state("endIncinerator") { //this:State
					action { //it:State
						CommUtils.outgreen("[$name] incinerator is now idle")
						forward("bringAsh", "bringAsh(X)" ,"oprobot" ) 
						 
						    		incinerator = 2
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t029",targetState="verifyCondition",cond=whenDispatch("ashDeposited"))
					transition(edgeName="t030",targetState="handleStateScale",cond=whenEvent("stateScale"))
					transition(edgeName="t031",targetState="handleStateSonar",cond=whenEvent("stateSonar"))
					transition(edgeName="t032",targetState="handleRobotPosition",cond=whenEvent("position"))
				}	 
				state("handleStateSonar") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("stateSonar(X)"), Term.createTerm("stateSonar(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 ashStorageLevel = payloadArg(0).toInt()  
								CommUtils.outgreen("[$name] Ash storage level updated: $ashStorageLevel")
						}
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("handleStateScale") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("stateScale(X)"), Term.createTerm("stateScale(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	wasteStorageWeight = payloadArg(0).toInt() 
												RP = wasteStorageWeight/50  
								CommUtils.outgreen("[$name] RP quantity updated: $RP")
						}
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("handleRobotPosition") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("position(X,Y,J)"), Term.createTerm("position(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	posX = payloadArg(0).toInt()
												posY = payloadArg(1).toInt() 
												job = payloadArg(2)
								CommUtils.outgreen("[$name] OpRobot   position $posX $posY   routine $job")
						}
						returnFromInterrupt(interruptedStateTransitions)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
