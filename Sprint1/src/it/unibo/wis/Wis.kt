/* Generated by AN DISI Unibo */ 
package it.unibo.wis

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Wis ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
			val DLIMT = 5
			var wasteStorageWeight=0;
			var ashStorageLevel = 0;
			var posX = 0;
			var posY = 0;
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outgreen("WIS: Initializing system")
						forward("act", "act(2)" ,"incinerator" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outgreen("WIS: Waiting for system events")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="endIncinerator",cond=whenEvent("burnEnd"))
					transition(edgeName="t01",targetState="handleStateScale",cond=whenDispatch("stateScale"))
					transition(edgeName="t02",targetState="handleStateSonar",cond=whenDispatch("stateSonar"))
					transition(edgeName="t03",targetState="position",cond=whenDispatch("position"))
					transition(edgeName="t04",targetState="handleStateIncinerator",cond=whenDispatch("stateIncinerator"))
				}	 
				state("handleStateSonar") { //this:State
					action { //it:State
						CommUtils.outgreen("WIS: Updating ash level")
						if( checkMsgContent( Term.createTerm("updateSonar(x)"), Term.createTerm("stateSonar(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 ashStorageLevel = payloadArg(0).toInt()  
								CommUtils.outgreen("Ash storage level: $ashStorageLevel")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleStateScale") { //this:State
					action { //it:State
						CommUtils.outgreen("WIS: Updating number of RP")
						if( checkMsgContent( Term.createTerm("updateScale(X)"), Term.createTerm("stateScale(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	wasteStorageWeight = payloadArg(0).toInt() 
												var RP = wasteStorageWeight/50
								CommUtils.outgreen("RP quantity: $RP")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("position") { //this:State
					action { //it:State
						CommUtils.outgreen("WIS: Updating the OpRobot status")
						if( checkMsgContent( Term.createTerm("position(X,Y)"), Term.createTerm("position(X,Y)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 	posX = payloadArg(0).toInt()
												posY = payloadArg(1).toInt()
								CommUtils.outgreen("OpRobot position: $posX $posY")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("handleStateIncinerator") { //this:State
					action { //it:State
						CommUtils.outgreen("WIS: Updating ash level")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("startIncenerator") { //this:State
					action { //it:State
						//INCENERATOR = true 
						CommUtils.outgreen("WIS: Incinerator started")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
				state("endIncinerator") { //this:State
					action { //it:State
						//INCENERATOR = false 
						CommUtils.outgreen("WIS: Incinerator ended")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
