/* Generated by AN DISI Unibo */ 
package it.unibo.sonarmock

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Sonarmock ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		var DISTANCE=200 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("[$name] inizializzazione.")
						delay(5000) 
						CommUtils.outred("[$name] stateSonar updated a $DISTANCE.")
						emitLocalStreamEvent("stateSonar", "stateSonar($DISTANCE)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t07",targetState="handleNewAsh",cond=whenDispatch("newAsh"))
					transition(edgeName="t08",targetState="handleEmptyAsh",cond=whenDispatch("emptyAsh"))
				}	 
				state("handleNewAsh") { //this:State
					action { //it:State
						DISTANCE = DISTANCE - 60 
						if(  DISTANCE < 0 
						 ){ DISTANCE = 0 
						}
						CommUtils.outred("[$name] stateSonar updated a $DISTANCE.")
						emitLocalStreamEvent("stateSonar", "stateSonar($DISTANCE)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="handleNewAsh",cond=whenDispatch("newAsh"))
					transition(edgeName="t010",targetState="handleEmptyAsh",cond=whenDispatch("emptyAsh"))
				}	 
				state("handleEmptyAsh") { //this:State
					action { //it:State
						DISTANCE = 200 
						CommUtils.outred("[$name] ashes svuotate. stateSonar updated a $DISTANCE.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t011",targetState="handleNewAsh",cond=whenDispatch("newAsh"))
					transition(edgeName="t012",targetState="handleEmptyAsh",cond=whenDispatch("emptyAsh"))
				}	 
			}
		}
} 
