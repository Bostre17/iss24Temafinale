/* Generated by AN DISI Unibo */ 
package it.unibo.sonarmock

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Sonarmock ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var DISTANCE = 100	
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("[$name] inizializzazione.")
						delay(5000) 
						emitLocalStreamEvent("stateSonar", "stateSonar($DISTANCE)" ) 
						CommUtils.outred("[$name] stateSonar updated a $DISTANCE.")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="updateAsh",cond=whenDispatch("ashDeposited"))
				}	 
				state("updateAsh") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ashDeposited(X)"), Term.createTerm("ashDeposited(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 DISTANCE = DISTANCE + payloadArg(0).toInt()	 
								emitLocalStreamEvent("stateSonar", "stateSonar($DISTANCE)" ) 
								CommUtils.outred("[$name] stateSonar updated a $DISTANCE.")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 
