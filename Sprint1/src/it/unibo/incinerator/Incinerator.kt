/* Generated by AN DISI Unibo */ 
package it.unibo.incinerator

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Incinerator ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "off"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
		    	var BTIME = 10L
		    	var state = 0
		return { //this:ActionBasciFsm
				state("off") { //this:State
					action { //it:State
						delay(100) 
						CommUtils.outgreen("[$name] waiting for activation")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t014",targetState="handleAct",cond=whenDispatch("act"))
				}	 
				state("handleAct") { //this:State
					action { //it:State
						 state = payloadArg(0).toInt() 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="burn", cond=doswitchGuarded({ state == 1  
					}) )
					transition( edgeName="goto",targetState="idle", cond=doswitchGuarded({! ( state == 1  
					) }) )
				}	 
				state("idle") { //this:State
					action { //it:State
						CommUtils.outgreen("[$name] idle")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t015",targetState="handleAct",cond=whenDispatch("act"))
				}	 
				state("burn") { //this:State
					action { //it:State
						CommUtils.outgreen("[$name] on")
						
									delay(Btime*1000)
									state = 2	
						emit("burnEnd", "burnend($Btime)" ) 
						updateResourceRep( "burnEnd(${Btime})"  
						)
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="idle", cond=doswitch() )
				}	 
			}
		}
} 
