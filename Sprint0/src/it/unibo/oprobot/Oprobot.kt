/* Generated by AN DISI Unibo */ 
package it.unibo.oprobot

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024

class Oprobot ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
		    var ashStorageFull = false
		    var wasteStorageEmpty = true
		    var incineratorBusy = false
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblack("$name attivo")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="home", cond=doswitch() )
				}	 
				state("home") { //this:State
					action { //it:State
						CommUtils.outblack("Robot in home position")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="checkMovement",cond=whenDispatch("go"))
					transition(edgeName="t01",targetState="updateStatus",cond=whenDispatch("status"))
				}	 
				state("checkMovement") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("go(ACTION)"), Term.createTerm("go(ACTION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblack("Condizioni soddisfatte: spostamento in waste storage")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wasteStorage", cond=doswitch() )
				}	 
				state("wasteStorage") { //this:State
					action { //it:State
						CommUtils.outblack("Prelievo Radioactive Pulp (RP)")
						 wasteStorageEmpty = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="burnin", cond=doswitch() )
				}	 
				state("burnin") { //this:State
					action { //it:State
						CommUtils.outblack("Deposito RP nella porta di incenerimento")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="home", cond=doswitch() )
				}	 
				state("burnout") { //this:State
					action { //it:State
						CommUtils.outblack("Prelievo cenere dalla porta di burnout")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="ashout", cond=doswitch() )
				}	 
				state("ashout") { //this:State
					action { //it:State
						CommUtils.outblack("Deposito cenere in ash storage")
						 ashStorageFull = true  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="home", cond=doswitch() )
				}	 
				state("updateStatus") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("status(CONDITION)"), Term.createTerm("status(CONDITION)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 
								            if(CONDITION == "ashFull") ashStorageFull = true
								            if(CONDITION == "wasteEmpty") wasteStorageEmpty = true
								            if(CONDITION == "incineratorBusy") incineratorBusy = true
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="home", cond=doswitch() )
				}	 
			}
		}
} 
